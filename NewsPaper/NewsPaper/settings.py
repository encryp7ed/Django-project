"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import redis
from pathlib import Path

from dotenv import load_dotenv

# Загрузить переменные окружения из файла .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x3j6urv7)zugql3^y6*egbq0y)3$@kl6sp+2ui5-#!@+5iyko9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'news.apps.NewsConfig',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'sign',
    'protect',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.yandex',

    'django_apscheduler',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'social_core.backends.yandex.YandexOAuth2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'news.middleware.MobileOrFullMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

# Настройка allauth
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': '123',
            'secret': '456',
            'key': ''
        }
    },

    'yandex': {
        'APP': {
            'client_id': '6e05d2af35924463b73162a81bfd3183',
            'secret': 'd912ae6cca374011be8de2ac5b9a5759',
            'key': ''
        }
    }
}

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

SITE_ID = 1

SITE_URL = 'http://127.0.0.1:8000'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'

ACCOUNT_FORMS = {'signup': 'sign.models.CommonSignupForm'}

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL = True

# Настройки apscheduler
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

# Настройки Redis
red = redis.Redis(
    host='redis-13229.c17.us-east-1-4.ec2.redns.redis-cloud.com',
    port=13229,
    password=os.getenv('REDIS_PASSWORD')
)

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_IMPORTS = ('news.tasks', )

# Настройки логирования
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Отключает существующие логгеры при загрузке конфигурации
    'style': '{',  # Стиль форматирования логов
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(message)s'  # Формат для логов
        },
        'error_format': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s'  # Формат для ошибок
        }
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',  # Фильтр, требующий DEBUG = True
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',  # Фильтр, требующий DEBUG = False
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',  # Уровень логирования для консоли (все сообщения)
            'class': 'logging.StreamHandler',  # Обработчик для вывода в консоль
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',  # Уровень логирования для отправки на почту (ошибки и выше)
            'class': 'django.utils.log.AdminEmailHandler',  # Обработчик для отправки на почту
            'formatter': 'error_format'
        },
        'general_file': {
            'level': 'INFO',  # Уровень логирования для общего файла (INFO и выше)
            'class': 'logging.FileHandler',  # Обработчик для записи в файл
            'filename': 'general.log',  # Имя файла
            'formatter': 'error_format',
            'filters': ['require_debug_false']  # Фильтр (требует DEBUG = False)
        },
        'errors_file': {
            'level': 'ERROR',  # Уровень логирования для файла ошибок (ошибки и выше)
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'error_format',
            'filters': ['require_debug_false']
        },
        'security_file': {
            'level': 'INFO',  # Уровень логирования для файла безопасности (INFO и выше)
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'error_format',
            'filters': ['require_debug_false']
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],  # Обработчики для логгера django
            'level': 'DEBUG',  # Уровень логирования
            'propagate': True,  # Распространять ли логи на родительские логгеры
        },
        'django.request': {
            'handlers': ['mail_admins'],  # Обработчики для логгера django.request
            'level': 'ERROR',
            'propagate': False,  # Не распространять логи на родительские логгеры
        },
        'django.server': {
            'handlers': ['errors_file'],  # Обработчики для логгера django.server
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['errors_file'],  # Обработчики для логгера django.template
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['errors_file'],  # Обработчики для логгера django.db.backends
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file'],  # Обработчики для логгера django.security
            'level': 'INFO',
            'propagate': False,
        },
    }
}
